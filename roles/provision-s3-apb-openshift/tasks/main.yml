- name: include plan vars
  include_vars:
    file: "{{ _apb_plan_id }}.yml"
- name: generate b62 hash
  shell: "16to62 {{ params_hash }}"
  register: command_output
- name: set fact
  set_fact:
    stack_suffix: "{{ command_output.stdout }}"
- name: Log stack suffix
  debug:
    msg: "stack_suffix: {{ stack_suffix }}"
- name: Launch S3
  cloudformation:
   stack_name: "apb-s3-{{ stack_suffix }}"
   state: "present"
   region: "{{ region }}"
   disable_rollback: false
   template: "{{ role_path }}/files/S3Bucket.yml"
   role_arn: "{{ aws_cloudformation_role_arn }}"
   template_parameters:
     ApplicationName: "{{ application_name }}"
     BucketName: "{{ BucketName }}"
     LoggingPrefix: "{{ LoggingPrefix }}"
     EnableGlacierLifeCycle: "{{ EnableGlacierLifeCycle | string }}"
     GlacierLifeCycleTransitionInDays: "{{ GlacierLifeCycleTransitionInDays }}"
     EnableVersioning: "{{ EnableVersioning | string }}"
     LifeCyclePrefix: "{{ LifeCyclePrefix }}"
     BucketAccessControl: "{{ BucketAccessControl }}"
   tags:
     ServiceBrokerId: "{{ application_name }}"
  register: s3
- name: Check for CloudFormation error logs
  debug:
    var: s3.log
- name: Get IAM user key_id
  shell: "ssmfetch {{ s3.stack_outputs.UserKeyId }} {{ region }}"
  register: command_output
- name: set fact
  set_fact:
    access_key_id: "{{ command_output.stdout }}"
- name: Get IAM user secret_key
  shell: "ssmfetch {{ s3.stack_outputs.UserSecretKey }} {{ region }}"
  register: command_output
- name: set fact
  set_fact:
    secret_access_key: "{{ command_output.stdout }}"
- name: Encode bind credentials
  asb_encode_binding:
    fields:
      S3_BUCKET_ARN:            "{{ s3.stack_outputs.BucketArn }}"
      S3_BUCKET_NAME:           "{{ s3.stack_outputs.BucketName }}"
      S3_REGION:                "{{ region }}"
      S3_AWS_ACCESS_KEY_ID:     "{{ access_key_id }}"
      S3_AWS_SECRET_ACCESS_KEY: "{{ secret_access_key }}"
  when: s3.log | length < 1
