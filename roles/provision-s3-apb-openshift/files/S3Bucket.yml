AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS Service Broker S3 . qs-1nt0fs937'
Parameters:
  ApplicationName:
    Description: >-
      This will be set as the value for the "APPLICATION_NAME" tag on all
      supported resources
    Type: String
  BucketName:
    Description: >-
      Must contain only lowercase letters, numbers, periods (.), and hyphens
      (-),Cannot end in numbers
    Type: String
    Default: apps3bucket
  LoggingPrefix:
    Description: >-
      Must contain only lowercase letters, numbers, periods (.), and hyphens
      (-),Cannot end in numbers
    Type: String
    Default: Archive
  EnableLogging:
    Description: enable or discable S3 logging
    Type: String
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'True'
  EnableGlacierLifeCycle:
    Description: enable archiving to Glacier Storage
    Type: String
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'False'
  GlacierLifeCycleTransitionInDays:
    Description: Define how many days objects should exist before being moved to Glacier
    Type: String
    Default: '0'
  EnableVersioning:
    Description: enable versioning
    Type: String
    AllowedValues:
      - 'True'
      - 'False'
    Default: 'False'
  LifeCyclePrefix:
    Description: >-
      Must contain only lowercase letters, numbers, periods (.), and hyphens
      (-),Cannot end in numbers
    Type: String
    Default: Archive
  BucketAccessControl:
    Description: define if the bucket can be accessed from public or private locations
    Type: String
    AllowedValues:
      - Private
      - PublicRead
      - PublicReadWrite
      - AuthenticatedRead
      - LogDeliveryWrite
      - BucketOwnerRead
      - BucketOwnerFullControl
      - AwsExecRead
    Default: "Private"
Mappings: {}
Conditions:
  UseLogging: !Equals 
    - !Ref EnableLogging
    - 'True'
  UseGlacierLifeCycle: !Equals 
    - !Ref EnableGlacierLifeCycle
    - 'True'
  UseVersioning: !Equals 
    - !Ref EnableVersioning
    - 'True'
Resources:
  S3bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      AccessControl: !Ref BucketAccessControl
      LifecycleConfiguration:
        Rules:
          - Id: GlacierRule
            Prefix: !Ref LifeCyclePrefix
            Status: Enabled
            ExpirationInDays: '365'
            Transitions:
              - TransitionInDays: !Ref GlacierLifeCycleTransitionInDays
                StorageClass: Glacier
      LoggingConfiguration: !If 
        - UseLogging
        - DestinationBucketName: !Ref LoggingBucket
          LogFilePrefix: !Ref LoggingPrefix
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: ApplicationName
          Value: !Ref ApplicationName
      VersioningConfiguration: !If 
        - UseVersioning
        - Status: Enabled
        - !Ref 'AWS::NoValue'
    DeletionPolicy: Retain
  LoggingBucket:
    Condition: UseLogging
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Join 
        - ''
        - - !Ref BucketName
          - logging
  IAMUserRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "iam_user_creation"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "iam:CreateAccessKey"
                  - "iam:PutUserPolicy"
                  - "iam:ListAttachedUserPolicies"
                  - "iam:DeleteUserPolicy"
                  - "iam:AttachUserPolicy"
                  - "iam:DeleteUser"
                  - "iam:ListUserPolicies"
                  - "iam:DetachUserPolicy"
                  - "iam:CreateUser"
                  - "iam:DeleteAccessKey"
                  - "iam:ListAccessKeys"
                  - "ssm:DeleteParameters"
                  - "ssm:PutParameter"
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  IAMUserLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "IAMUserRole"
          - "Arn"
      Code:
        ZipFile: |
            import cfnresponse
            import random
            import string
            import boto3
            import json
            from time import sleep


            alnum = string.ascii_uppercase + string.ascii_lowercase + string.digits
            iam_client = boto3.client('iam')
            ssm_client = boto3.client('ssm')


            def handler(event, context):
                response_code = cfnresponse.SUCCESS
                response_data = {}
                if event['RequestType'] == 'Create':
                    phys_id = ''.join(random.choice(alnum) for _ in range(16))
                else:
                    phys_id = event['PhysicalResourceId']
                response_data['asb-access-key-id'] = 'asb-access-key-id-%s' % phys_id
                response_data['asb-secret-access-key'] = 'asb-secret-access-key-%s' % phys_id
                try:
                    username = 'awssb-' + phys_id
                    if event['RequestType'] == 'Create':
                        policy_arns, inline_policies = ([], [])
                        if 'PolicyArns' in event['ResourceProperties']:
                            policy_arns = event['ResourceProperties']['PolicyArns']
                        if 'InlinePolicies' in event['ResourceProperties']:
                            inline_policies = event['ResourceProperties']['InlinePolicies']
                        iam_client.create_user(UserName=username)
                        for policy in policy_arns:
                            iam_client.attach_user_policy(PolicyArn=policy, UserName=username)
                        for policy in inline_policies:
                            iam_client.put_user_policy(UserName=username, PolicyDocument=json.dumps(policy),
                                                       PolicyName='asb-pol-%s' % random.randrange(1, 1000000000000))
                        response = iam_client.create_access_key(UserName=username)
                        aws_access_key_id = response['AccessKey']['AccessKeyId']
                        secret_access_key = response['AccessKey']['SecretAccessKey']
                        ssm_client.put_parameter(Name=response_data['asb-access-key-id'], Value=aws_access_key_id,
                                                 Type='SecureString')
                        ssm_client.put_parameter(Name=response_data['asb-secret-access-key'], Value=secret_access_key,
                                                 Type='SecureString')
                    elif event['RequestType'] == 'Update':
                        print('Update operation unsupported')
                        response_code = cfnresponse.FAILED
                    elif event['RequestType'] == 'Delete':
                        for policy in iam_client.list_attached_user_policies(UserName=username)['AttachedPolicies']:
                            iam_client.detach_user_policy(UserName=username, PolicyArn=policy['PolicyArn'])
                        for policy in iam_client.list_user_policies(UserName=username)['PolicyNames']:
                            iam_client.delete_user_policy(UserName=username, PolicyName=policy)
                        for access_key in iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']:
                            iam_client.delete_access_key(UserName=username, AccessKeyId=access_key['AccessKeyId'])
                        retries = 5
                        user_exists = True
                        while retries > 0 and user_exists:
                            try:
                                iam_client.delete_user(UserName=username)
                                user_exists=False
                            except Exception as e:
                                print(str(e))
                                retries-=1
                                sleep(5)
                        ssm_client.delete_parameters(Names=[
                            response_data['asb-access-key-id'],
                            response_data['asb-secret-access-key']
                        ])
                    cfnresponse.send(event, context, response_code, response_data, phys_id)
                except Exception as e:
                    print(str(e))
                    cfnresponse.send(event, context, cfnresponse.FAILED, response_data, phys_id)
      Runtime: "python2.7"
      Timeout: "60"
  IAMUserCreator:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken: !GetAtt IAMUserLambda.Arn
      InlinePolicies:
        - {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Action": [
                        "s3:AbortMultipartUpload",
                        "s3:DeleteObject",
                        "s3:GetObject",
                        "s3:GetObjectAcl",
                        "s3:GetObjectTagging",
                        "s3:GetObjectTorrent",
                        "s3:GetObjectVersion",
                        "s3:GetObjectVersionAcl",
                        "s3:GetObjectVersionTagging",
                        "s3:GetObjectVersionTorrent",
                        "s3:ListBucketMultipartUploads",
                        "s3:ListMultipartUploadParts",
                        "s3:PutObject",
                        "s3:PutObjectAcl",
                        "s3:PutObjectTagging"
                    ],
                    "Effect": "Allow",
                    "Resource": !Sub "${S3bucket.Arn}/*"
                },
                {
                    "Action": [
                        "s3:ListBucket"
                    ],
                    "Resource": !GetAtt S3bucket.Arn,
                    "Effect": "Allow"
                }
            ]
          }
Outputs:
  BucketName:
    Value: !Ref S3bucket
    Description: Name of the sample Amazon S3 bucket.
  BucketArn:
    Value: !GetAtt S3bucket.Arn
    Description: Name of the Amazon S3 bucket
  UserKeyId:
    Value: !GetAtt IAMUserCreator.asb-access-key-id
  UserSecretKey:
    Value: !GetAtt IAMUserCreator.asb-secret-access-key